"""
@title:      208. ÂÆûÁé∞ Trie (ÂâçÁºÄÊ†ë)
@difficulty: ‰∏≠Á≠â
@importance: 5/5
@tags:       Â≠óÂÖ∏Ê†ëTrie
"""

"""
ÂâçÁºÄÊ†ë‰πüÁß∞Ë∞ìÂ≠óÂÖ∏Ê†ëÔºåÁî®‰∫éÈ´òÊïàÁöÑÂ≠òÂÇ®ÂíåÊ£ÄÁ¥¢Â≠óÁ¨¶‰∏≤„ÄÇ
[a, ab, ac, ad, abd, acc]
        a
    ab      ac      ab
 abd       acc
 
Â≠óÂÖ∏Ê†ëÊúâ‰ª•‰∏ãÁâπÊÄßÔºö
    Âø´ÈÄüÊü•Êâæ: O(len(s)) ÁöÑÊó∂Èó¥Â§çÊùÇÂ∫¶
    ËäÇÁúÅÁ©∫Èó¥ÔºöÈÄöËøáÂÖ¨ÂÖ±ÂâçÁºÄËäÇÁúÅÂ≠òÂÇ®Á©∫Èó¥

Â≠óÂÖ∏Ê†ëÊúâ‰ª•‰∏ãÂ∫îÁî®Ôºö
    Ëá™Âä®Ë°•ÂÖ®ÔºöÊ†πÊçÆÁî®Êà∑ÁöÑËæìÂÖ•ÔºåÊèêÁ§∫Ë°•ÂÖ®ÂÜÖÂÆπ„ÄÇ
    ËØçÈ¢ëÁªüËÆ°ÔºöÊüêÂ≠óÁ¨¶‰∏≤Âá∫Áé∞ÁöÑÊ¨°Êï∞
    Ë∑ØÁî±Êü•ÊâæÔºöÊñá‰ª∂Á≥ªÁªü‰∏≠ÔºåipË∑ØÁî±Á≥ªÁªü‰∏≠ÁöÑË∑ØÁî±Ë°®Â∏∏‰ΩøÁî®Â≠óÂÖ∏Ê†ëÊù•ÁªÑÁªáÔºå‰ª•ÊèêÈ´òÊü•ÊâæÊïàÁéá„ÄÇ
"""




from collections import defaultdict
class TrieNode:
    def __init__(self):
        self.children = defaultdict(TrieNode)
        self.is_end_of_word = False


class Trie:
    """
    @tags:              Â≠óÂÖ∏Ê†ëÊï∞ÊçÆÁªìÊûÑ
    @time complexity:   O(len(n))
    @space complexity:  O(n)
    @description:       üí≤Â≠óÂÖ∏Ê†ëÊï∞ÊçÆÁªìÊûÑÁöÑÂÆûÁé∞
    """

    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str) -> None:
        cur = self.root
        for c in word:
            cur = cur.children[c]
        cur.is_end_of_word = True

    def search(self, word: str) -> bool:
        cur = self.root
        for c in word:
            cur = cur.children.get(c)
            if cur is None:
                return False
        return cur.is_end_of_word

    def startsWith(self, prefix: str) -> bool:
        cur = self.root
        for w in prefix:
            cur = cur.children.get(w)
            if cur == None:
                return False
        return True

    def delete(self, word: str) -> bool:
        cur = self.root
        for w in word:
            cur = cur.children.get(w)
            # ‰∏çÂ≠òÂú® word
            if cur == None:
                return False

        res = cur.is_end_of_word
        cur.is_end_of_word = False
        if len(cur.children) == 0:
            del cur.children

        return res


node = TrieNode()
print(node.children['a'])
print(node.children)
